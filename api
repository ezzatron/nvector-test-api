#!/usr/bin/env python3

import asyncio
import json
import numpy as np
from nvector import (
    lat_lon2n_E,
    n_E2lat_lon,
    n_E2R_EN,
    n_EA_E_and_n_EB_E2p_AB_E,
    n_EA_E_and_p_AB_E2n_EB_E,
    n_EB_E2p_EB_E,
    p_EB_E2n_EB_E,
    R2xyz,
    R2zyx,
    xyz2R,
    zyx2R,
)
import websockets


async def handle_websocket(websocket):
    try:
        async for message in websocket:
            req = json.loads(message)

            try:
                if req["fn"] == "ready":
                    result = True

                elif req["fn"] == "lat_lon2n_E":
                    args = {
                        "latitude": req["args"]["latitude"],
                        "longitude": req["args"]["longitude"],
                    }
                    if "R_Ee" in req["args"]:
                        args["R_Ee"] = np.array(req["args"]["R_Ee"])

                    result = lat_lon2n_E(**args).tolist()

                elif req["fn"] == "n_E2R_EN":
                    args = {"n_E": np.array(req["args"]["n_E"])}
                    if "R_Ee" in req["args"]:
                        args["R_Ee"] = np.array(req["args"]["R_Ee"])

                    result = n_E2R_EN(**args).tolist()

                elif req["fn"] == "n_E2lat_lon":
                    args = {"n_E": np.array(req["args"]["n_E"])}
                    if "R_Ee" in req["args"]:
                        args["R_Ee"] = np.array(req["args"]["R_Ee"])

                    [latitude], [longitude] = n_E2lat_lon(**args)
                    result = {"latitude": latitude, "longitude": longitude}

                elif req["fn"] == "n_EA_E_and_n_EB_E2p_AB_E":
                    args = {
                        "n_EA_E": np.array(req["args"]["n_EA_E"]),
                        "n_EB_E": np.array(req["args"]["n_EB_E"]),
                    }
                    if "z_EA" in req["args"]:
                        args["z_EA"] = req["args"]["z_EA"]
                    if "z_EB" in req["args"]:
                        args["z_EB"] = req["args"]["z_EB"]
                    if "a" in req["args"]:
                        args["a"] = req["args"]["a"]
                    if "f" in req["args"]:
                        args["f"] = req["args"]["f"]
                    if "R_Ee" in req["args"]:
                        args["R_Ee"] = np.array(req["args"]["R_Ee"])

                    result = n_EA_E_and_n_EB_E2p_AB_E(**args).tolist()

                elif req["fn"] == "n_EA_E_and_p_AB_E2n_EB_E":
                    args = {
                        "n_EA_E": np.array(req["args"]["n_EA_E"]),
                        "p_AB_E": np.array(req["args"]["p_AB_E"]),
                    }
                    if "z_EA" in req["args"]:
                        args["z_EA"] = req["args"]["z_EA"]
                    if "a" in req["args"]:
                        args["a"] = req["args"]["a"]
                    if "f" in req["args"]:
                        args["f"] = req["args"]["f"]
                    if "R_Ee" in req["args"]:
                        args["R_Ee"] = np.array(req["args"]["R_Ee"])

                    n_EB_E, [z_EB] = n_EA_E_and_p_AB_E2n_EB_E(**args)

                    if np.isnan(n_EB_E).any():
                        raise ValueError("Result contains NaN")

                    result = {"n_EB_E": n_EB_E.tolist(), "z_EB": z_EB}

                elif req["fn"] == "n_EB_E2p_EB_E":
                    args = {"n_EB_E": np.array(req["args"]["n_EB_E"])}
                    if "depth" in req["args"]:
                        args["depth"] = req["args"]["depth"]
                    if "a" in req["args"]:
                        args["a"] = req["args"]["a"]
                    if "f" in req["args"]:
                        args["f"] = req["args"]["f"]
                    if "R_Ee" in req["args"]:
                        args["R_Ee"] = np.array(req["args"]["R_Ee"])

                    result = n_EB_E2p_EB_E(**args).tolist()

                elif req["fn"] == "p_EB_E2n_EB_E":
                    args = {"p_EB_E": np.array(req["args"]["p_EB_E"])}
                    if "a" in req["args"]:
                        args["a"] = req["args"]["a"]
                    if "f" in req["args"]:
                        args["f"] = req["args"]["f"]
                    if "R_Ee" in req["args"]:
                        args["R_Ee"] = np.array(req["args"]["R_Ee"])

                    n_EB_E, [depth] = p_EB_E2n_EB_E(**args)

                    if np.isnan(n_EB_E).any():
                        raise ValueError("Result contains NaN")

                    result = {"n_EB_E": n_EB_E.tolist(), "depth": depth}

                elif req["fn"] == "R2xyz":
                    args = {"R_AB": np.array(req["args"]["R_AB"])}

                    result = R2xyz(**args).tolist()

                elif req["fn"] == "R2zyx":
                    args = {"R_AB": np.array(req["args"]["R_AB"])}

                    result = R2zyx(**args).tolist()

                elif req["fn"] == "xyz2R":
                    args = {
                        "x": req["args"]["x"],
                        "y": req["args"]["y"],
                        "z": req["args"]["z"],
                    }

                    result = xyz2R(**args).tolist()

                elif req["fn"] == "zyx2R":
                    args = {
                        "z": req["args"]["z"],
                        "y": req["args"]["y"],
                        "x": req["args"]["x"],
                    }

                    result = zyx2R(**args).tolist()

                else:
                    await websocket.send(
                        json.dumps({"id": req["id"], "error": "Unknown function"})
                    )
                    continue

                await websocket.send(json.dumps({"id": req["id"], "result": result}))
            except Exception as e:
                await websocket.send(json.dumps({"id": req["id"], "error": str(e)}))
    except websockets.exceptions.ConnectionClosed:
        pass


async def main():
    print("Listening on 8000")
    async with websockets.serve(handle_websocket, "0.0.0.0", 8000):
        try:
            await asyncio.Future()
        except asyncio.exceptions.CancelledError:
            pass


if __name__ == "__main__":
    asyncio.run(main())
