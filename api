#!/usr/bin/env python3

import asyncio
import json
import numpy as np
from nvector import (
    lat_lon2n_E,
    n_E2lat_lon,
    n_EB_E2p_EB_E,
    p_EB_E2n_EB_E,
)
import websockets


async def handle_websocket(websocket):
    try:
        async for message in websocket:
            req = json.loads(message)

            try:
                if req["fn"] == "ready":
                    result = True
                elif req["fn"] == "lat_lon2n_E":
                    result = lat_lon2n_E(
                        req["args"]["latitude"],
                        req["args"]["longitude"],
                        (
                            np.array(req["args"]["R_Ee"])
                            if "R_Ee" in req["args"]
                            else None
                        ),
                    ).tolist()
                elif req["fn"] == "n_E2lat_lon":
                    [latitude], [longitude] = n_E2lat_lon(
                        np.array(req["args"]["n_E"]),
                        (
                            np.array(req["args"]["R_Ee"])
                            if "R_Ee" in req["args"]
                            else None
                        ),
                    )
                    result = {"latitude": latitude, "longitude": longitude}
                elif req["fn"] == "n_EB_E2p_EB_E":
                    result = n_EB_E2p_EB_E(
                        np.array(req["args"]["n_EB_E"]),
                        req["args"].get("depth"),
                        req["args"].get("a"),
                        req["args"].get("f"),
                        (
                            np.array(req["args"]["R_Ee"])
                            if "R_Ee" in req["args"]
                            else None
                        ),
                    ).tolist()
                elif req["fn"] == "p_EB_E2n_EB_E":
                    result = p_EB_E2n_EB_E(
                        np.array(req["args"]["p_EB_E"]),
                        req["args"].get("a"),
                        req["args"].get("f"),
                        (
                            np.array(req["args"]["R_Ee"])
                            if "R_Ee" in req["args"]
                            else None
                        ),
                    ).tolist()
                else:
                    await websocket.send(
                        json.dumps({"id": req["id"], "error": "Unknown function"})
                    )
                    continue

                await websocket.send(json.dumps({"id": req["id"], "result": result}))
            except Exception as e:
                await websocket.send(json.dumps({"id": req["id"], "error": str(e)}))
    except websockets.exceptions.ConnectionClosed:
        pass


async def main():
    print("Listening on 8000")
    async with websockets.serve(handle_websocket, "0.0.0.0", 8000):
        try:
            await asyncio.Future()
        except asyncio.exceptions.CancelledError:
            pass


if __name__ == "__main__":
    asyncio.run(main())
